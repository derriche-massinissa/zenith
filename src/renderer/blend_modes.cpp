/**
 * @file
 * @author		__AUTHOR_NAME__ <mail@host.com>
 * @copyright	2021 __COMPANY_LTD__
 * @license		<a href="https://opensource.org/licenses/MIT">MIT License</a>
 */

#include "renderer.hpp"
#include "../enums/blend_modes.hpp"

namespace Zen {

void Renderer::createBlendModes ()
{
	blendModes[BLEND_MODE::NORMAL] = SDL_BLENDMODE_NONE;

	blendModes[BLEND_MODE::BLEND] = SDL_BLENDMODE_BLEND;

	blendModes[BLEND_MODE::ADD] = SDL_BLENDMODE_ADD;

	blendModes[BLEND_MODE::MULTIPLY] = SDL_BLENDMODE_MOD;

	blendModes[BLEND_MODE::SCREEN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SUBTRACT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_SUBTRACT,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::ERASE] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_OVER] = SDL_BLENDMODE_BLEND;

	blendModes[BLEND_MODE::SOURCE_IN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_OUT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_ATOP] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_OVER] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_IN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_OUT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_ATOP] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::LIGHTER] = SDL_BLENDMODE_ADD;

	blendModes[BLEND_MODE::COPY] = SDL_BLENDMODE_NONE;

	blendModes[BLEND_MODE::XOR] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);
}

}	// namespace Zen
