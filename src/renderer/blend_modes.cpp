/**
 * @file
 * @author		__AUTHOR_NAME__ <mail@host.com>
 * @copyright	2021 __COMPANY_LTD__
 * @license		<a href="https://opensource.org/licenses/MIT">MIT License</a>
 */

#include "renderer.hpp"
#include "../enums/blend_modes.hpp"

namespace Zen {

void Renderer::createBlendModes ()
{
	blendModes.resize(20);

	// C = (S.rgb * 1) + (D.rgb * 0)
	int mode = static_cast<int>(BLEND_MODE::NORMAL);
	blendModes[mode] = {
		// eqn
		{GL_FUNC_ADD},
		// fnc
		{GL_ONE, GL_ZERO}
	};

	// C = (S * S.a) + (D * (1 - S.a))
	mode = static_cast<int>(BLEND_MODE::BLEND);
	blendModes[mode] = {
		{GL_FUNC_ADD},
		{GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA}
	};

	// C = (S * 1) + (D * 1)
	mode = static_cast<int>(BLEND_MODE::ADD);
	blendModes[mode] = {
		{GL_FUNC_ADD},
		{GL_ONE, GL_ONE}
	};

	// C = (S * D) + (D * 0)
	mode = static_cast<int>(BLEND_MODE::MULTIPLY);
	blendModes[mode] = {
		{GL_FUNC_ADD},
		{GL_DST_COLOR, GL_ZERO}
	};

	// C.rgb = (S.rgb * 1-D.rgb) + (D.rgb * 1)
	// C.a = (S.a * 0) + (D.a * 1)
	//
	// C = S + (1 - S) * D
	mode = static_cast<int>(BLEND_MODE::SCREEN);
	blendModes[mode] = {
		{GL_FUNC_ADD},
		{GL_ONE, GL_ONE_MINUS_SRC_COLOR}
	};

	mode = static_cast<int>(BLEND_MODE::SUBTRACT);
	blendModes[mode] = {
		{GL_FUNC_SUBTRACT},
		{GL_ONE, GL_ONE}
	};

	mode = static_cast<int>(BLEND_MODE::ERASE);
	blendModes[mode] = {
		{GL_FUNC_ADD, GL_FUNC_ADD},
		{GL_ZERO, GL_ONE, GL_ZERO, GL_ONE_MINUS_SRC_ALPHA}
	};




	mode = static_cast<int>(BLEND_MODE::XOR);
	blendModes[mode] = {
		{GL_FUNC_ADD, GL_FUNC_ADD},
		{GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,
			GL_ONE_MINUS_DST_ALPHA, GL_ONE_MINUS_SRC_ALPHA}
	};















	/*
	blendModes[BLEND_MODE::NORMAL] = SDL_BLENDMODE_NONE;

	blendModes[BLEND_MODE::BLEND] = SDL_BLENDMODE_BLEND;

	blendModes[BLEND_MODE::ADD] = SDL_BLENDMODE_ADD;

	blendModes[BLEND_MODE::MULTIPLY] = SDL_BLENDMODE_MOD;

	blendModes[BLEND_MODE::SCREEN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SUBTRACT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_SUBTRACT,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::ERASE] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_OVER] = SDL_BLENDMODE_BLEND;

	blendModes[BLEND_MODE::SOURCE_IN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_OUT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::SOURCE_ATOP] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_OVER] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_IN] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_OUT] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ZERO,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::DESTINATION_ATOP] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_DST_ALPHA,
			SDL_BLENDFACTOR_ONE,
			SDL_BLENDOPERATION_ADD
			);

	blendModes[BLEND_MODE::LIGHTER] = SDL_BLENDMODE_ADD;

	blendModes[BLEND_MODE::COPY] = SDL_BLENDMODE_NONE;

	blendModes[BLEND_MODE::XOR] = SDL_ComposeCustomBlendMode(
			SDL_BLENDFACTOR_SRC_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD,
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA,
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,
			SDL_BLENDOPERATION_ADD
			);
	*/
}

}	// namespace Zen
